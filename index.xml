<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>心在路上</title>
    <link>https://songchunbo.github.io/</link>
    <description>Recent content on 心在路上</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Sep 2021 20:37:39 +0800</lastBuildDate><atom:link href="https://songchunbo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dart VM源码分析之编译dill</title>
      <link>https://songchunbo.github.io/post/dart_vm_how_compile_works/</link>
      <pubDate>Sun, 12 Sep 2021 20:37:39 +0800</pubDate>
      
      <guid>https://songchunbo.github.io/post/dart_vm_how_compile_works/</guid>
      <description>一、Dart VM概述 Dart VM是运行dart的虚拟机，由多个isolate组成，每个isolate提供dart的运行环境，类似Android/ART中Zygote提供的Java运行环境，Dart VM包含下面几个重要的isolate
  vm isolate
负责维持系统中基础的heap object如null,class_, true, false，供各个isolate共享
  kernel isolate
主要用于执行CFE代码，CFE使用dart语言开发，实现了dart的语法分析，词法分析和语义分析，生成kernel AST
  service isolate
主要用于执行其他isolate发起的service请求，service包括debug相关，compile相关等，具体列表： https://github.com/dart-lang/sdk/blob/main/runtime/vm/service.cc#L5254
  dartdev isolate
主要用于执行用户命令，如dart run/compile等命令，最终会转换为后端命令。
用户命令: dart compile kernel hello.dart 后端命令: dart --snapshot-kind=kernel --snapshot=hello.dill --verbosity=all hello.dart   main isolate
主要用来执行用户开发的dart code。
  更多关于Dart VM的基础原理可参见dart作者的blog，网上很多blog来自这篇文章，这篇文章还在持续完善中
https://mrale.ph/dartvm/
二、Dart VM各个isolate在main函数中的启动和初始化过程   5个isolate在main中的初始化和启动过程
int main(int argc, char* argv[]) { Dart_Initialize(&amp;amp;init_params) { Dart::Init(..) { Dart::DartInit(...) { //各种初始化,线程池，heap,zone,object(null_,class_),stub code等  // create_group_ = CreateIsolateGroupAndSetup();  Isolate::SetCreateGroupCallback(create_group); // 创建&amp;#34;vm-isolate&amp;#34; isolate  vm_isolate_ = Isolate::InitIsolate(&amp;#34;vm-isolate&amp;#34;, .</description>
    </item>
    
    <item>
      <title>Dart VM命令行工具</title>
      <link>https://songchunbo.github.io/post/dart_vm_quick_start/</link>
      <pubDate>Fri, 10 Sep 2021 15:30:24 +0800</pubDate>
      
      <guid>https://songchunbo.github.io/post/dart_vm_quick_start/</guid>
      <description>Dart命令支持JIT和AOT模式 1. JIT模式支持两种方式，   直接在dart VM中运行dart source code
//hello.dart  int add(int a, int b) { return a + b; } void main() { var sum = add(5,100); print(&amp;#34;sum is $sum&amp;#34;); } $ dart hello.dart sum is 105   先把dart source code编译成dill binary，然后在dart VM中运行dill binary , 生成的dill文件中包含经过词法分析，语法分析和语义分析后的带标记的抽象语法树AST，dart称之为Kernel AST, dill binary是跨平台的格式, 可以在不同平台的dart VM中运行。
$ dart compile kernel hello.dart # generate hello.dill $ dart run hello.dill   2. AOT模式支持两种方式   直接把dart source code编译成可执行文件，可执行文件包含source code的机器码，以及简化版的dart runtime</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://songchunbo.github.io/about/</link>
      <pubDate>Wed, 10 Mar 2021 00:13:27 +0000</pubDate>
      
      <guid>https://songchunbo.github.io/about/</guid>
      <description>专注于移动安全，虚拟机技术, Android沙箱，Android Framework, ART Runtime, Dart Runtime 病毒检测，逆向
 扫码关注   </description>
    </item>
    
    <item>
      <title>X86 and ARM Call Convention</title>
      <link>https://songchunbo.github.io/post/x86_arm_callconvention/</link>
      <pubDate>Mon, 10 Aug 2020 16:02:03 +0800</pubDate>
      
      <guid>https://songchunbo.github.io/post/x86_arm_callconvention/</guid>
      <description>ARM64 call convention
https://android.googlesource.com/platform/art/+/refs/tags/android-11.0.0_r35/runtime/interpreter/mterp/arm64/main.S
/* ARM64 Runtime register usage conventions. r0 : w0 is 32-bit return register and x0 is 64-bit. r0-r7 : Argument registers. r8-r15 : Caller save registers (used as temporary registers). r16-r17: Also known as ip0-ip1, respectively. Used as scratch registers by the linker, by the trampolines and other stubs (the backend uses these as temporary registers). r18 : Caller save register (used as temporary register).</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://songchunbo.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://songchunbo.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://songchunbo.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://songchunbo.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
